name: Build images webapp and box from latest dev branch

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      
jobs:

 #   build-cpp:
 #       name: Build C++
 #       runs-on: ubuntu-latest
 #       container: ghcr.io/eden/eden-builder:latest
 #
 #       steps:
 #           - name: âœ… Checkout code
 #             uses: actions/checkout@v2
 #
 #           - uses: dorny/paths-filter@v2
 #             id: filter
 #             with:
 #                 filters: |
 #                     src:
 #                       - ".github/workflows/build.yml"
 #
 #                       - "CMakeLists.txt"
 #                       - "contracts/**"
 #                       - "external/CMakeLists.txt"
 #                       - "libraries/**"
 #                       - "native/**"
 #                       - "programs/**"
 #                       - "wasm/**"
 #
 #           - name: Prepare ccache timestamp
 #             if: steps.filter.outputs.src == 'true'
 #             id: ccache_cache_timestamp
 #             shell: cmake -P {0}
 #             run: |
 #                 string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
 #                 message("::set-output name=timestamp::${current_date}")
 #
 #           - name: show_cache
 #             if: steps.filter.outputs.src == 'true'
 #             id: show_cache
 #             run: |
 #                 echo "${{ runner.os }}-ccache_whole-${{ steps.ccache_cache_timestamp.outputs.timestamp }}"
 #                 echo "${{ runner.os }}-product_cache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}"
 #
 #           - name: ccache cache files
 #             if: steps.filter.outputs.src == 'true'
 #             uses: actions/cache@v1.1.0
 #             with:
 #                 path: .ccache
 #                 key: ${{ runner.os }}-ccache_whole-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
 #                 restore-keys: |
 #                     ${{ runner.os }}-ccache_whole-
 #
 #           - name: product cache files
 #             uses: actions/cache@v1.1.0
 #             with:
 #                 path: product_cache
 #                 key: ${{ runner.os }}-product_cache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
 #                 restore-keys: |
 #                     ${{ runner.os }}-product_cache-
 #
 #           - name: ðŸ›  Build
 #             if: steps.filter.outputs.src == 'true'
 #             run: |
 #                 set -e
 #                 export CCACHE_DIR=${GITHUB_WORKSPACE}/.ccache
 #                 export CCACHE_CONFIGPATH=${GITHUB_WORKSPACE}/.github/ccache.conf
 #                 echo =====
 #                 pwd
 #                 echo ${GITHUB_WORKSPACE}
 #                 echo =====
 #                 ccache -s
 #                 echo =====
 #
 #                 git submodule update --init --recursive
 #                 mkdir build
 #                 cd build
 #                 cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DSKIP_TS=Yes -DEDEN_ATOMIC_ASSETS_ACCOUNT=atomicassets -DEDEN_ATOMIC_MARKET_ACCOUNT=atomicmarket -DEDEN_SCHEMA_NAME=members ..
 #                 make -j$(nproc)
 #
 #                 tar czf clsdk-ubuntu-20-04.tar.gz clsdk
 #                 rm -rf ../product_cache
 #                 mkdir -p ../product_cache/clsdk/contracts
 #                 cp clsdk-ubuntu-20-04.tar.gz ../product_cache
 #                 cp atomicassets.abi ../product_cache
 #                 cp atomicassets.wasm ../product_cache
 #                 cp atomicmarket.abi ../product_cache
 #                 cp atomicmarket.wasm ../product_cache
 #                 cp clsdk/contracts/bios.wasm ../product_cache/clsdk/contracts/bios.wasm
 #                 cp boot.wasm ../product_cache
 #                 cp eden-micro-chain.wasm ../product_cache
 #                 cp eden.abi ../product_cache
 #                 cp eden.wasm ../product_cache
 #                 cp run-elections.wasm ../product_cache
 #                 cp run-genesis.wasm ../product_cache
 #                 cp run-complete-elections.wasm ../product_cache
 #                 cp token.abi ../product_cache
 #                 cp token.wasm ../product_cache
 #
 #                 echo =====
 #                 ls -la ${GITHUB_WORKSPACE}
 #                 echo =====
 #                 ccache -s
 #                 echo =====
 #
 #           - name: ðŸ§ª Run tests with CTest
 #             if: steps.filter.outputs.src == 'true'
 #             run: cd build && ctest -j$(nproc) -V
 #
 #           - name: ðŸ“ƒ Upload ccache.log
 #             if: steps.filter.outputs.src == 'true'
 #             uses: actions/upload-artifact@v2
 #             with:
 #                 name: ccache_log
 #                 path: |
 #                     ccache.log
 #
 #           - name: ðŸ“ƒ Upload clsdk
 #             uses: actions/upload-artifact@v2
 #             with:
 #                 name: clsdk
 #                 path: |
 #                     product_cache/clsdk-ubuntu-20-04.tar.gz
 #
 #           - name: ðŸ“ƒ Upload Eden Smart Contract
 #             uses: actions/upload-artifact@v2
 #             with:
 #                 name: Eden Smart Contract
 #                 path: |
 #                     product_cache/eden.abi
 #                     product_cache/eden.wasm
 #                     product_cache/eden-micro-chain.wasm
 #
 #           - name: ðŸ“ƒ Upload Ephemeral Eden Chains Runners
 #             uses: actions/upload-artifact@v2
 #             with:
 #                 name: Ephemeral Eden Chains Runners
 #                 path: |
 #                     product_cache/atomicassets.abi
 #                     product_cache/atomicassets.wasm
 #                     product_cache/atomicmarket.abi
 #                     product_cache/atomicmarket.wasm
 #                     product_cache/clsdk/contracts/bios.wasm
 #                     product_cache/boot.wasm
 #                     product_cache/eden.abi
 #                     product_cache/eden.wasm
 #                     product_cache/token.abi
 #                     product_cache/token.wasm
 #                     product_cache/run-genesis.wasm
 #                     product_cache/run-elections.wasm
 #                     product_cache/run-complete-elections.wasm

    build-micro-chain:
        name: Build Micro Chain
        runs-on: ubuntu-latest
        container: ghcr.io/edenia/eden-builder:latest

        steps:
            - name: âœ… Checkout code
              uses: actions/checkout@v3

            - name: Prepare ccache timestamp
              id: ccache_cache_timestamp
              shell: cmake -P {0}
              run: |
                  string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
                  message("name=timestamp>>${current_date}")
            
            - name: show_cache
              id: show_cache
              run: echo "${{ runner.os }}-ccache_microchain-${{ steps.ccache_cache_timestamp.outputs.timestamp }}"
            
            - name: ccache cache files
              uses: actions/cache@v3
              with:
                  path: .ccache
                  key: ${{ runner.os }}-ccache_microchain-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
                  restore-keys: |
                      ${{ runner.os }}-ccache_microchain-
            
            - name: ðŸ›  Build
              run: |
                  git config --global --add safe.directory "*"
                  set -e
                  export CCACHE_DIR=${GITHUB_WORKSPACE}/.ccache
                  export CCACHE_CONFIGPATH=${GITHUB_WORKSPACE}/.github/ccache.conf
                  echo =====
                  pwd
                  echo ${GITHUB_WORKSPACE}
                  echo =====
                  ccache -s
                  echo =====
            
                  
                  git submodule update --init external/atomicassets-contract
                  git submodule update --init external/Catch2
                  git submodule update --init external/fmt
                  git submodule update --init external/rapidjson
                  mkdir build
                  cd build
                  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DSKIP_TS=Yes -DEDEN_ATOMIC_ASSETS_ACCOUNT=atomicassets -DEDEN_ATOMIC_MARKET_ACCOUNT=atomicmarket -DEDEN_SCHEMA_NAME=members -DBUILD_NATIVE=OFF ..
                  make -j$(nproc) wasm-configure
                  bash -c "cd wasm && make -j$(nproc) eden-micro-chain"
            
                  echo =====
                  ls -la ${GITHUB_WORKSPACE}
                  echo =====
                  ccache -s
                  echo =====
            
            - name: ðŸ“ƒ Upload ccache.log
              uses: actions/upload-artifact@v3
              with:
                  name: microchain_ccache_log
                  path: |
                      ccache.log
            
            - name: ðŸ“ƒ Upload Eden Microchain
              uses: actions/upload-artifact@v3
              with:
                  name: Eden Microchain
                  path: |
                      build/eden-micro-chain.wasm

    box-build:
        needs: build-micro-chain
        name: Build Eden Box
        runs-on: ubuntu-latest

        steps:
            - name: âœ… Checkout code
              uses: actions/checkout@v3

            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      src:
                        - ".github/workflows/push-dev-environment.yml"
            
                        - ".eslintignore"
                        - ".eslintrc.js"
                        - ".prettierrc.json"
                        - "lerna.json"
                        - "package.json"
                        - "packages/common/**"
                        - "tsconfig.build.json"
                        - "tsconfig.json"
                        - "yarn.lock"
            
                        - "docker/eden-box.Dockerfile"
                        - "packages/box/**"

            - name: Download Eden Microchain
              # if: steps.filter.outputs.src == 'true'
              uses: actions/download-artifact@v3
              with:
                  name: Eden Microchain
                  path: build

            - name: Image Preparation
              # if: steps.filter.outputs.src == 'true'
              id: prep
              run: |
                  REGISTRY="ghcr.io"
                  IMAGE="${REGISTRY}/${{ github.repository_owner }}/eden-box"
                  TAGS="${IMAGE}:$(git rev-parse --short HEAD)"
                  echo "tags_box=${TAGS}" >> $GITHUB_OUTPUT

            - name: Showtag
              # if: steps.filter.outputs.src == 'true'
              id: showtag
              run: echo ${{ steps.prep.outputs.tags_box }}

            - name: Docker Buildx setup
              # if: steps.filter.outputs.src == 'true'
              uses: docker/setup-buildx-action@v2

            - name: Login in to registry
              # if: steps.filter.outputs.src == 'true'
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build env files box
              id: build-env-files-box
              run: |
                  make \
                      build-env-files-box
              env:
                  ENVIRONMENT: dev
                  DEV_SERVER_HOST: ${{ secrets.DEV_SERVER_HOST }}
                  DEV_SERVER_PORT: ${{ secrets.DEV_SERVER_PORT }}
                  DEV_EOS_CHAIN_ID: ${{ secrets.DEV_EOS_CHAIN_ID }}
                  EOS_RPC_PROTOCOL: https
                  EOS_RPC_HOST: jungle4.api.eosnation.io
                  EOS_RPC_PORT: 443
                  TAPOS_MANAGER_INTERVAL_MINS: 30
                  DEV_EDEN_CONTRACT_ACCOUNT: ${{ secrets.DEV_EDEN_CONTRACT_ACCOUNT }}
                  DEV_IPFS_PINATA_JWT_BOX:  ${{ secrets.DEV_IPFS_PINATA_JWT_BOX }}
                  DEV_SUBCHAIN_EDEN_CONTRACT: ${{ secrets.DEV_SUBCHAIN_EDEN_CONTRACT }}
                  DEV_SUBCHAIN_TOKEN_CONTRACT: ${{ secrets.DEV_SUBCHAIN_TOKEN_CONTRACT }}
                  DEV_SUBCHAIN_AA_CONTRACT: ${{ secrets.DEV_SUBCHAIN_AA_CONTRACT }}
                  DEV_SUBCHAIN_AA_MARKET_CONTRACT: ${{ secrets.DEV_SUBCHAIN_AA_MARKET_CONTRACT }}
                  DEV_SUBCHAIN_WASM: ${{ secrets.DEV_SUBCHAIN_WASM }}
                  SUBCHAIN_STATE: state
                  DFUSE_API_KEY: 
                  DEV_DFUSE_API_NETWORK: ${{ secrets.DEV_DFUSE_API_NETWORK }}
                  DFUSE_AUTH_NETWORK: ${{ secrets.DFUSE_AUTH_NETWORK }}
                  DFUSE_FIRST_BLOCK: 35955488
                  DEV_DFUSE_JSON_TRX_FILE: ${{ secrets.DEV_DFUSE_JSON_TRX_FILE }}
                  DFUSE_INTERVAL: 30
                  DEV_SERVER_PAYS_PRIVATE_KEY: ${{ secrets.DEV_SERVER_PAYS_PRIVATE_KEY }}
                  DEV_SERVER_PAYS_ACCOUNT: ${{ secrets.DEV_SERVER_PAYS_ACCOUNT }}
                  DEV_SERVER_PAYS_PERMISSION: ${{ secrets.DEV_SERVER_PAYS_PERMISSION }}
                  DEV_SERVER_PAYS_NOOP_CONTRACT: ${{ secrets.DEV_SERVER_PAYS_NOOP_CONTRACT }}
                  DEV_SERVER_PAYS_NOOP_ACTION: ${{ secrets.DEV_SERVER_PAYS_NOOP_ACTION }}
                  DEV_SERVER_PAYS_CREATE_ABI: ${{ secrets.DEV_SERVER_PAYS_CREATE_ABI }}
                  SESSIONS_ENABLE: true
           
            - name: ðŸ›  Build & Publish Image
              # if: steps.filter.outputs.src == 'true'
              uses: docker/build-push-action@v3
              with:
                  push: true
                  file: docker/eden-box.Dockerfile
                  tags: ${{ steps.prep.outputs.tags_box }}
                  context: .

#    e2e:
#        needs: [build-cpp, build-micro-chain]
#        name: E2E Tests
#        environment: e2e_tests
#        runs-on: ubuntu-latest
#
#        steps:
#            - name: âœ… Checkout code
#              uses: actions/checkout@v2
#
#            - uses: dorny/paths-filter@v2
#              id: filter
#              with:
#                  filters: |
#                      src:
#                        - ".github/workflows/build.yml"
#
#                        - ".eslintignore"
#                        - ".eslintrc.js"
#                        - ".prettierrc.json"
#                        - "lerna.json"
#                        - "package.json"
#                        - "packages/common/**"
#                        - "tsconfig.build.json"
#                        - "tsconfig.json"
#                        - "yarn.lock"
#                        - "scripts/eden_chain_runner.sh"
#
#                        - "packages/**"
#                        - "contracts/**"
#
#            - name: Download Eden Microchain
#              if: steps.filter.outputs.src == 'true'
#              uses: actions/download-artifact@v2
#              with:
#                  name: Eden Microchain
#                  path: build
#
#            - name: Download Ephemeral Eden Chain Runners
#              if: steps.filter.outputs.src == 'true'
#              uses: actions/download-artifact@v2
#              with:
#                  name: Ephemeral Eden Chains Runners
#                  path: build
#
#            - name: Download clsdk
#              if: steps.filter.outputs.src == 'true'
#              uses: actions/download-artifact@v2
#              with:
#                  name: clsdk
#                  path: build
#
#            - name: Start Genesis Ephemeral Chain
#              if: steps.filter.outputs.src == 'true'
#              run: |
#                  cp ./scripts/eden_chain_runner.sh ./build
#                  cd build
#                  tar -xvf clsdk-ubuntu-20-04.tar.gz clsdk/bin
#                  ls -la
#                  sh -x ./eden_chain_runner.sh run-genesis.wasm
#
#            - name: ðŸ›  Build and Start WebApp
#              if: steps.filter.outputs.src == 'true'
#              run: |
#                  export DFUSE_PREVENT_CONNECT=1
#                  export NODE_ENV=test
#                  env
#                  yarn
#                  yarn build --stream --ignore @edenos/example-history-app
#                  yarn start-test --stream --ignore @edenos/example-history-app &
#              env:
#                  IPFS_PINATA_JWT: ${{ secrets.IPFS_PINATA_JWT }}
#
#            - name: ðŸ§ª Run E2E
#              if: steps.filter.outputs.src == 'true'
#              run: |
#                  yarn test --stream
#
#            - name: ðŸŽ¥ Upload Cypress Results
#              if: always() && steps.filter.outputs.src == 'true'
#              uses: actions/upload-artifact@v2
#              with:
#                  name: Cypress E2E Videos and Screenshots
#                  path: |
#                      packages/webapp/cypress/screenshots
#                      packages/webapp/cypress/videos

    webapp-build:
        needs: build-micro-chain
        name: Build Eden Community WebApp
        runs-on: ubuntu-latest

        steps:
            - name: âœ… Checkout code
              uses: actions/checkout@v3

            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      src:
                        - ".github/workflows/push-dev-environment.yml"
            
                        - ".eslintignore"
                        - ".eslintrc.js"
                        - ".prettierrc.json"
                        - "lerna.json"
                        - "package.json"
                        - "packages/common/**"
                        - "tsconfig.build.json"
                        - "tsconfig.json"
                        - "yarn.lock"
            
                        - "docker/eden-webapp.Dockerfile"
                        - "packages/webapp/**"

            - name: Image Preparation
              # if: steps.filter.outputs.src == 'true'
              id: prep
              run: |
                  REGISTRY="ghcr.io"
                  IMAGE="${REGISTRY}/${{ github.repository_owner }}/eden-webapp"
                  TAGS="${IMAGE}:$(git rev-parse --short HEAD)"
                  echo "tags_webapp=${TAGS}" >> $GITHUB_OUTPUT

            - name: Showtag
              # if: steps.filter.outputs.src == 'true'
              id: showtag
              run: echo ${{ steps.prep.outputs.tags_webapp }}

            - name: Docker Buildx setup
              # if: steps.filter.outputs.src == 'true'
              uses: docker/setup-buildx-action@v2

            - name: Login in to registry
              # if: steps.filter.outputs.src == 'true'
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}
                  
            - name: Build env files webapp
              id: build-env-files-webapp
              run: |
                  make \
                      build-env-files-webapp
              env:
                  ENVIRONMENT: dev
                  NEXT_PUBLIC_APP_NAME: Eden Community App
                  NEXT_PUBLIC_APP_SHORT_NAME: eden-community-app
                  NEXT_PUBLIC_BASE_URL: https://eden.edenia.cloud
                  DEV_NEXT_PUBLIC_EOS_CHAIN_ID: ${{ secrets.DEV_NEXT_PUBLIC_EOS_CHAIN_ID }}
                  NEXT_PUBLIC_EOS_RPC_PROTOCOL: https
                  NEXT_PUBLIC_EOS_RPC_HOST: jungle4.api.eosnation.io
                  NEXT_PUBLIC_EOS_RPC_PORT: 443
                  NEXT_PUBLIC_EOS_READ_RPC_URLS: https://jungle4.api.eosnation.io
                  NEXT_PUBLIC_TABLE_ROWS_MAX_FETCH_PER_SEC: 20
                  NEXT_PUBLIC_EDEN_CONTRACT_ACCOUNT: genesis.eden
                  NEXT_PUBLIC_AA_FETCH_AFTER: 35955488
                  NEXT_PUBLIC_TOKEN_CONTRACT: eosio.token
                  NEXT_PUBLIC_TOKEN_SYMBOL: EOS
                  NEXT_PUBLIC_TOKEN_PRECISION: 4
                  NEXT_PUBLIC_AA_BASE_URL: https://jungle-aa.edenia.cloud/atomicassets/v1
                  NEXT_PUBLIC_AA_MARKET_URL: https://jungle-aa.edenia.cloud/atomicmarket/v1
                  NEXT_PUBLIC_AA_HUB_URL: https://wax-test.atomichub.io
                  NEXT_PUBLIC_AA_CONTRACT: atomicassets
                  NEXT_PUBLIC_AA_MARKET_CONTRACT: atomicmarket
                  NEXT_PUBLIC_AA_COLLECTION_NAME: genesis.eden
                  NEXT_PUBLIC_AA_SCHEMA_NAME: members
                  NEXT_PUBLIC_BLOCKEXPLORER_ACCOUNT_BASE_URL: https://wax-test.bloks.io/account
                  NEXT_PUBLIC_BLOCKEXPLORER_TRANSACTION_BASE_URL: https://wax-test.bloks.io/transaction
                  NEXT_PUBLIC_APP_MINIMUM_DONATION_AMOUNT: 3.0000 EOS
                  NEXT_PUBLIC_ENABLED_WALLETS: ANCHOR,LEDGER,SOFTKEY
                  NEXT_PUBLIC_IPFS_BASE_URL: https://infura-ipfs.io/ipfs
                  NEXT_PUBLIC_DEV_USE_FIXTURE_DATA: false
                  DEV_NEXT_PUBLIC_ZOOM_CLIENT_ID: ${{ secrets.DEV_NEXT_PUBLIC_ZOOM_CLIENT_ID }}
                  NEXT_PUBLIC_FREEFORM_MEETING_LINKS_ENABLED: false
                  NEXT_PUBLIC_ELECTION_MEETING_DURATION_MS: 2400000
                  DEV_NEXT_PUBLIC_ELECTION_COMMUNITY_ROOM_URL: ${{ secrets.DEV_NEXT_PUBLIC_ELECTION_COMMUNITY_ROOM_URL }}
                  NEXT_PUBLIC_SUBCHAIN_WASM_URL: https://eden-box.edenia.cloud/v1/subchain/eden-micro-chain.wasm
                  NEXT_PUBLIC_SUBCHAIN_STATE_URL: https://eden-box.edenia.cloud/v1/subchain/state
                  NEXT_PUBLIC_SUBCHAIN_WS_URL: wss://eden-box.edenia.cloud/v1/subchain/eden-microchain
                  NEXT_PUBLIC_SUBCHAIN_SLOW_MO: false
                  NEXT_PUBLIC_BOX_ADDRESS: https://eden-box.edenia.cloud
                  NEXT_PUBLIC_BOX_UPLOAD_IPFS: true
                  DEV_IPFS_PINATA_JWT_WEBAPP: ${{ secrets.DEV_IPFS_PINATA_JWT_WEBAPP }}
                  DEV_IPFS_PINATA_API: ${{ secrets.DEV_IPFS_PINATA_API }}
                  DEV_JOBS_AUTH_GC: ${{ secrets.DEV_JOBS_AUTH_GC }}
                  DEV_EOS_PRIVATE_KEY_GC_JOB: ${{ secrets.DEV_EOS_PRIVATE_KEY_GC_JOB }}
                  DEV_ZOOM_CLIENT_SECRET: ${{ secrets.DEV_ZOOM_CLIENT_SECRET }}
                  DEV_MEETINGS_SECRET_KEY: ${{ secrets.DEV_MEETINGS_SECRET_KEY }}

            - name: ðŸ›  Build & Publish Image
              # if: steps.filter.outputs.src == 'true'
              uses: docker/build-push-action@v3
              with:
                  push: true
                  file: docker/eden-webapp.Dockerfile
                  tags: ${{ steps.prep.outputs.tags_webapp }}
                  context: .

    deploy-kubernetes-dev:
      needs: [box-build, webapp-build]
      runs-on: ubuntu-latest
      steps:
    
            - name: âœ… Checkout code
              uses: actions/checkout@v3
              
            - name: Build kubernetes files
              id: build_kubernetes_files
              run: |
                  make \
                      build-kubernetes
                  
              env:
                  # general
                  ENVIRONMENT: dev
                  VERSION_DISTRIBUTE: ${{secrets.VERSION_DISTRIBUTE}}
                  VERSION_WATCHER: ${{secrets.VERSION_WATCHER}}
                  DEV_EOS_API_ENDPOINT: ${{secrets.DEV_EOS_API_ENDPOINT}}
                  DEV_EOS_API_CHAIN_ID: ${{secrets.DEV_EOS_API_CHAIN_ID}}
                  DEV_EOS_DISTRIBUTE_ACCOUNT: ${{secrets.DEV_EOS_DISTRIBUTE_ACCOUNT}}
                  DEV_EOS_DISTRIBUTE_PERMISSION: ${{secrets.DEV_EOS_DISTRIBUTE_PERMISSION}}
                  DEV_EOS_DISTRIBUTE_PRIVATE_KEY: ${{secrets.DEV_EOS_DISTRIBUTE_PRIVATE_KEY}}
                  DEV_EOS_DISTRIBUTE_MAX_STEPS: ${{secrets.DEV_EOS_DISTRIBUTE_MAX_STEPS}}
                  DEV_EOS_EDEN_ACCOUNT: ${{secrets.DEV_EOS_EDEN_ACCOUNT}}
                  DEV_EOS_PAYER_ACCOUNT: ${{secrets.DEV_EOS_PAYER_ACCOUNT}}
                  DEV_EOS_PAYER_PERMISION: ${{secrets.DEV_EOS_PAYER_PERMISION}}
                  DEV_EOS_PAYER_PRIVATE_KEY: ${{secrets.DEV_EOS_PAYER_PRIVATE_KEY}}
                  DEV_EOS_WATCH_ACCOUNT: ${{secrets.DEV_EOS_WATCH_ACCOUNT}}
                  DEV_EOS_POWERUP_THRESHOLD: ${{secrets.DEV_EOS_POWERUP_THRESHOLD}}
                  DEV_EOS_NET_FRAC: ${{secrets.DEV_EOS_NET_FRAC}}
                  DEV_EOS_CPU_FRAC: ${{secrets.DEV_EOS_CPU_FRAC}}
                  DEV_EOS_POWERUP_AMOUNT: ${{secrets.DEV_EOS_POWERUP_AMOUNT}}
              
            - name: Deploy kubernetes files
             
              uses: steebchen/kubectl@v1.1.0
              env:
                  KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA }}
                  ENVIRONMENT: dev
                  NAMESPACE: eden
                  VERSION_DISTRIBUTE: ${{secrets.VERSION_DISTRIBUTE}}
                  VERSION_WATCHER: ${{secrets.VERSION_WATCHER}}
                  DEV_EOS_API_ENDPOINT: ${{secrets.DEV_EOS_API_ENDPOINT}}
                  DEV_EOS_API_CHAIN_ID: ${{secrets.DEV_EOS_API_CHAIN_ID}}
                  DEV_EOS_DISTRIBUTE_ACCOUNT: ${{secrets.DEV_EOS_DISTRIBUTE_ACCOUNT}}
                  DEV_EOS_DISTRIBUTE_PERMISSION: ${{secrets.DEV_EOS_DISTRIBUTE_PERMISSION}}
                  DEV_EOS_DISTRIBUTE_PRIVATE_KEY: ${{secrets.DEV_EOS_DISTRIBUTE_PRIVATE_KEY}}
                  DEV_EOS_DISTRIBUTE_MAX_STEPS: ${{secrets.DEV_EOS_DISTRIBUTE_MAX_STEPS}}
                  DEV_EOS_EDEN_ACCOUNT: ${{secrets.DEV_EOS_EDEN_ACCOUNT}}
                  DEV_EOS_PAYER_ACCOUNT: ${{secrets.DEV_EOS_PAYER_ACCOUNT}}
                  DEV_EOS_PAYER_PERMISION: ${{secrets.DEV_EOS_PAYER_PERMISION}}
                  DEV_EOS_PAYER_PRIVATE_KEY: ${{secrets.DEV_EOS_PAYER_PRIVATE_KEY}}
                  DEV_EOS_WATCH_ACCOUNT: ${{secrets.DEV_EOS_WATCH_ACCOUNT}}
                  DEV_EOS_POWERUP_THRESHOLD: ${{secrets.DEV_EOS_POWERUP_THRESHOLD}}
                  DEV_EOS_NET_FRAC: ${{secrets.DEV_EOS_NET_FRAC}}
                  DEV_EOS_CPU_FRAC: ${{secrets.DEV_EOS_CPU_FRAC}}
                  DEV_EOS_POWERUP_AMOUNT: ${{secrets.DEV_EOS_POWERUP_AMOUNT}}
              with:
                  args: version && make deploy-kubernetes
