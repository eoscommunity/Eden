--- tools/build/src/tools/emscripten.jam	2020-12-03 00:02:49.000000000 -0500
+++ ../emscripten.jam	2021-06-16 17:49:00.260000000 -0400
@@ -9,6 +9,7 @@
 import common ;
 import gcc ;
 import type ;
+import generators ;
 
 feature.feature embind : off on : propagated ;
 feature.feature closure : off on full : propagated ;
@@ -49,10 +50,12 @@
         <debug-symbols>off <debug-symbols>on
         <rtti>off <rtti>on
         ;
+generators.override builtin.lib-generator : emscripten.prebuilt ;
+generators.override emscripten.searched-lib-generator : searched-lib-generator ;
 
 type.set-generated-target-suffix EXE : <toolset>emscripten : "js" ;
-type.set-generated-target-suffix OBJ : <toolset>emscripten : "bc" ;
-type.set-generated-target-suffix STATIC_LIB : <toolset>emscripten : "bc" ;
+type.set-generated-target-suffix OBJ : <toolset>emscripten : "o" ;
+type.set-generated-target-suffix STATIC_LIB : <toolset>emscripten : "a" ;
 
 toolset.flags emscripten.compile OPTIONS <flags> ;
 toolset.flags emscripten.compile OPTIONS <cflags> ;
@@ -94,7 +97,7 @@
 
 actions archive
 {
-    "$(CONFIG_COMMAND)" $(AROPTIONS) -o "$(<)" "$(>)"
+    emar q "$(<)" "$(>)"
 }
 
 toolset.flags emscripten.link USER_OPTIONS <linkflags> ;
--- boost/interprocess/detail/workaround.hpp	2020-12-03 00:01:42.000000000 -0500
+++ ../bip-workaround.hpp	2021-06-17 15:21:14.930000000 -0400
@@ -29,7 +29,7 @@
    //////////////////////////////////////////////////////
    //Check for XSI shared memory objects. They are available in nearly all UNIX platforms
    //////////////////////////////////////////////////////
-   #if !defined(__QNXNTO__) && !defined(__ANDROID__) && !defined(__HAIKU__) && !(__VXWORKS__)
+   #if !defined(__QNXNTO__) && !defined(__ANDROID__) && !defined(__HAIKU__) && !(__VXWORKS__) && !defined(__wasm__)
       #define BOOST_INTERPROCESS_XSI_SHARED_MEMORY_OBJECTS
    #endif
 
--- boost/test/impl/execution_monitor.ipp	2021-06-17 15:49:21.400000000 -0400
+++ ../execution_monitor.ipp	2021-06-17 15:49:11.460000000 -0400
@@ -163,7 +163,7 @@
 
 // documentation of BOOST_TEST_DISABLE_ALT_STACK in execution_monitor.hpp
 #  if !defined(__CYGWIN__) && !defined(__QNXNTO__) && !defined(__bgq__) && \
-   (!defined(__ANDROID__) || __ANDROID_API__ >= 8) && \
+   (!defined(__ANDROID__) || __ANDROID_API__ >= 8) && !defined(__wasm__) && \
    !defined(BOOST_TEST_DISABLE_ALT_STACK)
 #    define BOOST_TEST_USE_ALT_STACK
 #  endif
--- ../operations.cpp   2021-06-18 20:10:10.380000000 -0400
+++ ./libs/filesystem/src/operations.cpp        2021-06-18 20:10:14.310000000 -0400
@@ -1663,7 +1663,7 @@
 BOOST_FILESYSTEM_DECL
 path current_path(error_code* ec)
 {
-# if defined(__wasm)
+# if defined(xxxx__wasm)
   emit_error(BOOST_ERROR_NOT_SUPPORTED, ec, "boost::filesystem::current_path");
   return path();
 # elif defined(BOOST_POSIX_API)
@@ -1734,7 +1734,7 @@
 BOOST_FILESYSTEM_DECL
 void current_path(const path& p, system::error_code* ec)
 {
-# if defined(UNDER_CE) || defined(__wasm)
+# if defined(UNDER_CE) || defined(xxxx__wasm)
   emit_error(BOOST_ERROR_NOT_SUPPORTED, p, ec, "boost::filesystem::current_path");
 # else
   error(!BOOST_SET_CURRENT_DIRECTORY(p.c_str()) ? BOOST_ERRNO : 0,
